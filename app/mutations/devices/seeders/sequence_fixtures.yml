---
:TAKE_PHOTO_OF_PLANT: # ======清空照片=================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: red
  :name: 清空照片
  :pinned: true
  :body:
    - :kind: lua
      :args:
        :lua: "images = api({method = \"GET\", url = \"/api/images\"})\r\nstart_time = os.time() * 1000\r\n\r\nif #images == 0 then\r\n    send_message(\"info\", \"Could not find any images for deletion\", \"toast\")\r\n    return\r\nend\r\n\r\nfor k in pairs(images) do\r\n    set_job_progress(\"Deleting \" .. #images .. \" images\", {\r\n        percent = 100 * k / #images,\r\n        status = \"Deleting\",\r\n        time = start_time\r\n    })\r\n    api({method = \"DELETE\", url = \"/api/images/\" .. images[k].id})\r\n    wait(250)\r\nend\r\n\r\nset_job_progress(\"Deleting \" .. #images .. \" images\", {\r\n    percent = 100,\r\n    status = \"Complete\",\r\n    time = start_time\r\n})"

:WATER_PLANT: # ==============智能浇水====================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
        - :kind: parameter_declaration
          :args:
            :label: 作物组
            :default_value:
              :kind: location_placeholder
              :args: {}
        - :kind: parameter_declaration
          :args:
            :label: 浇水/毫升
            :default_value:
              :kind: numeric
              :args:
                :number: 200
        - :kind: parameter_declaration
          :args:
            :label: 湿度阈值
            :default_value:
              :kind: numeric
              :args:
                :number: 500
        - :kind: parameter_declaration
          :args:
            :label: 距离差
            :default_value:
              :kind: numeric
              :args:
                :number: 100
  :color: blue
  :pinned: true
  :name: 智能浇水
  :description: 这个指令流，会根据之前的土壤温度，来判断是否需要浇水
  :body:
  - :kind: execute
    :args:
      :sequence_id: 0
    :body:
      - :kind: parameter_application
        :args:
          :label: Tool
          :data_value:
            :kind: tool
            :args:
              :tool_id: 0
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: axis_overwrite
        :args:
          :axis: 'y'
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: axis_addition
        :args:
          :axis: x
          :axis_operand:
            :kind: numeric
            :args:
              :number: 100
      - :kind: safe_z
        :args: {}
  - :kind: lua
    :args:
      :lua: "function Clone(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= \"table\" then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for key, value in pairs(object) do\r\n            new_table[_copy(key)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend\r\n\r\nfunction Filter(t)\r\n    local std_year = 31556926\r\n    local std_month = 2629743\r\n    local std_day = 86400\r\n    local std_hour = 3600\r\n    local std_min = 60\r\n    local tmp1 = Clone(t)\r\n    local tmp2 = Clone(t)\r\n    local i = 1\r\n    while (i <= #tmp1) do\r\n        local v1 = tmp1[i]\r\n        for k2, v2 in pairs(tmp2) do\r\n            local _, _, y1, m1, d1, h1, min1, sec1 = string.find(v1.updated_at, \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).%s*\")\r\n            local timestamp1 = std_year * (y1 - 1970) + std_month * (m1 - 1) + std_day * (d1 - 1) + std_hour * h1 +\r\n                std_min * min1 + sec1\r\n\r\n            local _, _, y2, m2, d2, h2, min2, sec2 = string.find(v2.updated_at, \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).%s*\")\r\n            local timestamp2 = std_year * (y2 - 1970) + std_month * (m2 - 1) + std_day * (d2 - 1) + std_hour * h2 +\r\n                std_min * min2 + sec2\r\n\r\n            if v1.id ~= v2.id and math.floor(v1.x + 0.5) == math.floor(v2.x + 0.5) and math.floor(v1.y + 0.5) == math.floor(v2.y + 0.5) then\r\n                if math.floor(timestamp1) < math.floor(timestamp2) then\r\n                    table.remove(tmp1, i)\r\n                    table.remove(tmp2, i)\r\n                    i = 0\r\n                    break\r\n                else\r\n                    table.remove(tmp1, k2)\r\n                    table.remove(tmp2, k2)\r\n                end\r\n            end\r\n        end\r\n        i = i + 1\r\n    end\r\n    return tmp1\r\nend\r\n\r\nsensor_reading = api({ method = \"GET\", url = \"/api/sensor_readings\" })\r\ncrop = variable(\"作物组\")\r\n\r\nlocal sensor_reading_only59 = {}\r\nfor k, v in pairs(sensor_reading) do\r\n    if v.pin == 59 then\r\n        table.insert(sensor_reading_only59, v)\r\n    end\r\nend\r\n\r\nlocal unique_sensor_reading = Filter(sensor_reading_only59)\r\nflag = false\r\nfor k, v in pairs(unique_sensor_reading) do\r\n    if math.floor(v.x + 0.5) == math.floor(crop.x + 0.5) + variable(\"距离差\") and math.floor(v.y + 0.5) == math.floor(crop.y + 0.5) then\r\n        flag = true\r\n        \r\n        if v.value < variable(\"湿度阈值\") then\r\n            -- toast(\"浇水了X: \" .. math.floor(v.x + 0.5) .. \" \" .. \"Y:\" .. math.floor(v.y + 0.5) .. \"Value:\" .. v.value .. \"time:\" .. v.updated_at, \"success\")\r\n            -- toast(\"浇水了: \" .. variable(\"浇水/毫升\"))\r\n            dispense(variable(\"浇水/毫升\"))\r\n        end\r\n    end\r\nend\r\nif not flag then\r\n    toast(\"无湿度数据\", \"error\")\r\nend"    

:PLANT_SEED_GENESIS: # =======批量播种=======================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
        - :kind: parameter_declaration
          :args:
            :label: 种植组
            :default_value:
              :kind: location_placeholder
              :args: {}
  :color: yellow
  :name: 批量播种
  :pinned: true
  :body:
  - :kind: execute
    :args:
      :sequence_id: 0
    :body:
      - :kind: parameter_application
        :args:
          :label: Tool
          :data_value:
            :kind: tool
            :args:
              :tool_id: 0
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_addition
        :args:
          :axis: x
          :axis_operand:
            :kind: numeric
            :args:
              :number: 18
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: -11
      - :kind: safe_z
        :args: {}
    :comment: 移到种子上面
  - :kind: write_pin
    :args:
      :pin_value: 1
      :pin_mode: 0
      :pin_number:
        :kind: named_pin
        :args:
          :pin_type: Peripheral
          :pin_id: 1
    :comment: 打开吸嘴
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: 种植组
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: identifier
            :args:
              :label: 种植组
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: identifier
            :args:
              :label: 种植组
      - :kind: safe_z
        :args: {}
    :comment: 作物坐标
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_addition
        :args:
          :axis: x
          :axis_operand:
            :kind: numeric
            :args:
              :number: 0
      - :kind: axis_addition
        :args:
          :axis: y
          :axis_operand:
            :kind: numeric
            :args:
              :number: 0
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: -515
    :comment: 插入土壤
  - :kind: write_pin
    :args:
      :pin_value: 0
      :pin_mode: 0
      :pin_number:
        :kind: named_pin
        :args:
          :pin_type: Peripheral
          :pin_id: 1
    :comment: 关闭吸嘴
  - :kind: update_resource
    :args:
      :resource:
        :kind: identifier
        :args:
          :label: 种植组
    :body:
      - :kind: pair
        :args:
          :label: plant_stage
          :value: planted
    :comment: 标记作物
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 0
 
:PLANT_SEED_EXPRESS: # ===================================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: parent
          :default_value:
            :kind: coordinate
            :args:
              :z: 0
              :y: 0
              :x: 0
  :color: yellow
  :name: Plant seed
  :body:
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: special_value
            :args:
              :label: "soil_height"
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 150
      - :kind: safe_z
        :args: {}
    :comment: Move to above plant
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: special_value
            :args:
              :label: "soil_height"
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: -25
      - :kind: speed_overwrite
        :args:
          :axis: z
          :speed_setting:
            :kind: numeric
            :args:
              :number: 25
    :comment: Plant seed
  - :kind: write_pin
    :args:
      :pin_mode: 0
      :pin_value: 0
      :pin_number:
        :kind: named_pin
        :args:
          :pin_id: 0
          :pin_type: Peripheral
    :comment: Turn off vacuum pump
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: identifier
            :args:
              :label: parent
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: special_value
            :args:
              :label: "soil_height"
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 150
    :comment: Retract needle
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 0
    :comment: Move Z to home position

:PICK_UP_SEED_EXPRESS: # =========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: yellow
  :name: Pick up seed
  :body:
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 50
      - :kind: safe_z
        :args: {}
    :comment: Move above seed trough
  - :kind: write_pin
    :args:
      :pin_mode: 0
      :pin_value: 1
      :pin_number:
        :kind: named_pin
        :args:
          :pin_id: 0
          :pin_type: Peripheral
    :comment: Turn on vacuum pump
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: speed_overwrite
        :args:
          :axis: z
          :speed_setting:
            :kind: numeric
            :args:
              :number: 25
    :comment: Pick up seed
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: y
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: tool
            :args:
              :tool_id: 0
      - :kind: axis_addition
        :args:
          :axis: z
          :axis_operand:
            :kind: numeric
            :args:
              :number: 50
    :comment: Move above seed trough

:PICK_UP_SEED_GENESIS: # =====测量湿度===================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
        - :kind: parameter_declaration
          :args:
            :label: 种植组
            :default_value:
              :kind: coordinate
              :args:
                :x: 0
                :y: 0
                :z: 0
  :color: blue
  :forked: false
  :name: 测量湿度
  :pinned: true
  :kind: sequence
  :body:
    - :kind: execute
      :args:
        :sequence_id: 0
      :body:
        - :kind: parameter_application
          :args:
            :label: Tool
            :data_value:
              :kind: tool
              :args:
                :tool_id: 0
    - :kind: move
      :args: {}
      :body:
        - :kind: axis_overwrite
          :args:
            :axis: x
            :axis_operand:
              :kind: identifier
              :args:
                :label: 种植组
        - :kind: axis_overwrite
          :args:
            :axis: y
            :axis_operand:
              :kind: identifier
              :args:
                :label: 种植组
        - :kind: axis_overwrite
          :args:
            :axis: z
            :axis_operand:
              :kind: identifier
              :args:
                :label: 种植组
        - :kind: axis_addition
          :args:
            :axis: x
            :axis_operand:
              :kind: numeric
              :args:
                :number: 100
        - :kind: safe_z
          :args: {}
    - :kind: move
      :args: {}
      :body:
        - :kind: axis_addition
          :args:
            :axis: x
            :axis_operand:
              :kind: numeric
              :args:
                :number: 0
        - :kind: axis_addition
          :args:
            :axis: y
            :axis_operand:
              :kind: numeric
              :args:
                :number: 0
        - :kind: axis_addition
          :args:
            :axis: z
            :axis_operand:
              :kind: numeric
              :args:
                :number: -540
    - :kind: read_pin
      :args:
        :pin_mode: 1
        :label: '---'
        :pin_number:
          :kind: named_pin
          :args:
            :pin_type: Sensor
            :pin_id: 1                
    - :kind: move
      :args: {}
      :body:
        - :kind: axis_overwrite
          :args:
            :axis: z
            :axis_operand:
              :kind: special_value
              :args:
                :label: safe_height

:WATER_ALL_PLANTS: # =========曲线浇水=================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: Plant
          :default_value:
            :kind: coordinate
            :args:
              :x: 0
              :y: 0
              :z: 0
  :color: green
  :name: 曲线浇水
  :body:
    - :kind: execute
      :args:
        :sequence_id: 0
      :body:
        - :kind: parameter_application
          :args:
            :label: Tool
            :data_value:
              :kind: tool
              :args:
                :tool_id: 0
    - :kind: lua
      :args:
        :lua: water(variable("Plant"))

:FIND_HOME_GENESIS: # ========查找归零===============
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: blue
  :name: 查找归零
  :body:
  - :kind: find_home
    :args:
      :speed: 100
      :axis: all
    :comment: Find home on all axes

:FIND_HOME_EXPRESS: # ========查找归零=================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: blue
  :name: 查找归零
  :body:
  - :kind: find_home
    :args:
      :speed: 100
      :axis: y
    :comment: Find home on the Y axis
  - :kind: find_home
    :args:
      :speed: 100
      :axis: x
    :comment: Find home on the X axis

:MOUNT_TOOL: # ===============挂载工具=========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: Tool
          :default_value:
            :kind: location_placeholder
            :args: {}
  :color: gray
  :name: 挂载工具
  :body:
  - :kind: lua
    :args:
      :lua: "need_tool = variable(\"Tool\")\r\nif not verify_tool() then\r\n    toast(\"未挂载工具头，开始挂载...\", \"success\")\r\n    mount_tool(need_tool)\r\nelse\r\n    local mounted_id = get_device(\"mounted_tool_id\")\r\n    -- Get tool name\r\n    local mounted_tool = api({ url = \"/api/tools/\" .. mounted_id })\r\n    if not mounted_tool then\r\n        toast(\"API error\", \"error\")\r\n        return\r\n    end\r\n    if need_tool.tool_id ~= mounted_tool.id then\r\n        toast(\"开始更换工具头...\", \"success\")\r\n        dismount_tool()\r\n        wait(3000)\r\n        mount_tool(need_tool)\r\n    end\r\nend\r\nif not verify_tool() then\r\n    toast(\"挂载Tool失败...\", \"error\")\r\n    emergency_lock()\r\nend"

:DISMOUNT_TOOL: # ============卸载工具===========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: gray
  :name: 卸载工具
  :body:
  - :kind: lua
    :args:
      :lua: "dismount_tool()"

:WATER_ALL: # ================遍历浇水==========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
        - :kind: parameter_declaration
          :args:
            :label: 作物组
            :default_value:
              :kind: location_placeholder
              :args: {}
        - :kind: parameter_declaration
          :args:
            :label: 毫升
            :default_value:
              :kind: numeric
              :args:
                :number: 500
  :color: blue
  :name: 遍历浇水
  :body:
  - :kind: execute
    :args:
      :sequence_id: 0
    :body:
    - :kind: parameter_application
      :args:
        :label: Tool
        :data_value:
          :kind: tool
          :args:
            :tool_id: 0
  - :kind: move
    :args: {}
    :body:
      - :kind: axis_overwrite
        :args:
          :axis: x
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: axis_overwrite
        :args:
          :axis: 'y'
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: axis_overwrite
        :args:
          :axis: z
          :axis_operand:
            :kind: identifier
            :args:
              :label: 作物组
      - :kind: safe_z
        :args: {}
  - :kind: execute
    :args:
      :sequence_id: 0
    :body:
      - :kind: parameter_application
        :args:
          :label: Water (mL)
          :data_value:
            :kind: identifier
            :args:
              :label: 毫升

:SOIL_HEIGHT_GRID: # =======测量土壤高度========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: gray
  :name: 测量土壤高度
  :body:
  - :kind: lua
    :args:
      :lua: "local grid = photo_grid()\ntype = \"Scan\"\njob = \"Soil Height Grid\"\nstart_time = os.time() * 1000\n\ngrid.each(function(cell)\n    set_job_progress(job, {\n        percent = 100 * (cell.count - 0.5) / grid.total,\n        status = \"Moving\",\n        time = start_time\n    })\n    move_absolute(cell.x, cell.y, cell.z)\n    set_job_progress(job, {\n        percent = 100 * (cell.count / grid.total),\n        status = \"Measuring soil height\",\n        time = start_time\n    })\n    local msg = \"Measuring height at point \" .. cell.count .. \" of \" .. grid.total\n    send_message(\"info\", msg)\n    measure_soil_height()\nend)\n\nset_job_progress(job, {\n    percent = 100,\n    status = \"Complete\",\n    time = start_time\n})"

:PICK_FROM_SEED_TRAY: # ===================================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: Seed Tray
          :default_value:
            :kind: location_placeholder
            :args: {}
      - :kind: parameter_declaration
        :args:
          :label: Seed Tray Cell
          :default_value:
            :kind: text
            :args:
              :string: B3
  :color: yellow
  :name: Pick from Seed Tray
  :body:
  - :kind: lua
    :args:
      :lua: "tray = variable(\"Seed Tray\")\ncell_label = variable(\"Seed Tray Cell\")\ncell = get_seed_tray_cell(tray, cell_label)\ncell_depth = 5\nvacuum_pump_pin = 9\n\n-- Checks\nif not verify_tool() then\n    return\nend\n\n-- Send message with cell info\nlocal cell_coordinates = \" (\" .. cell.x .. \", \" .. cell.y .. \", \" .. cell.z - cell_depth .. \")\"\nsend_message(\"info\", \"Picking up seed from cell \" .. cell_label .. cell_coordinates, \"toast\")\n\n-- Job\nstart_time = os.time() * 1000\nfunction job(status, percent)\n    set_job_progress(\"Pick from Seed Tray\", {\n        status = status,\n        percent = percent,\n        time = start_time\n    })\nend\n\n-- Safe Z move to above the cell\njob(\"Moving to Seed Tray\", 25)\nmove_absolute({\n    x = cell.x,\n    y = cell.y,\n    z = cell.z + 25,\n    safe_z = true\n})\n\n-- Pick up seed\njob(\"Picking up seed\", 75)\nwrite_pin(vacuum_pump_pin, \"digital\", 1)\nmove_absolute(cell.x, cell.y, cell.z - cell_depth)\n\n-- Retract Z\njob(\"Retracting Z\", 90)\nmove_absolute(cell.x, cell.y, cell.z + 25)\njob(\"Complete\", 100)"

:PHOTO_GRID: # ===============全面拍摄=========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: red
  :name: 全面拍摄
  :body:
  - :kind: lua
    :args:
      :lua: "local grid = photo_grid()\ntype = \"Scan\"\njob = \"Photo Grid\"\nstart_time = os.time() * 1000\n\ngrid.each(function(cell)\n    set_job_progress(job, {\n        percent = 100 * (cell.count - 0.5) / grid.total,\n        status = \"Moving\",\n        time = start_time\n    })\n    move_absolute(cell.x, cell.y, cell.z)\n    set_job_progress(job, {\n        percent = 100 * (cell.count / grid.total),\n        status = \"Taking photo\",\n        time = start_time\n    })\n    local msg = \"Taking photo \" .. cell.count .. \" of \" .. grid.total\n    send_message(\"info\", msg)\n    take_photo()\nend)\n\nset_job_progress(job, {\n    percent = 100,\n    status = \"Complete\",\n    time = start_time\n})"

:MOW_ALL_WEEDS: # ============动力除草==========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: red
  :name: 动力除草
  :body:
  - :kind: lua
    :args:
      :lua: "rotary_tool_pin = 2 -- 3 for REV\nmax_load = tonumber(env(\"rotary_tool_max_load\")) or 90\nrotary_tool_height = tonumber(env(\"rotary_tool_height\")) or 80\nmax_attempts = tonumber(env(\"rotary_tool_max_attempts\")) or 3\nweeds = {}\ncount = 0\n\nfunction job(status, percent)\n    set_job_progress(\"Mowing weed at \" .. coords, {\n        status = status,\n        percent = percent,\n        time = job_time\n    })\nend\n\npjob_time = os.time() * 1000\nfunction pjob(status, percent)\n    set_job_progress(\"Mowing \" .. #weeds .. \" weeds\", {\n        status = status,\n        percent = percent,\n        time = pjob_time\n    })\nend\n\nwatcher = function(data)\n    if (data.value > max_load) and (env(\"load\") ~= \"stalled\") then\n        env(\"load\", \"stalled\")\n        soft_stop()\n        off(rotary_tool_pin)\n        toast(\"Rotary tool max load exceeded (load = \" .. data.value .. \")\", \"warn\")\n    end\nend\n\nfunction attempt_weeding()\n    attempts = attempts + 1\n    env(\"load\", \"nominal\")\n    job(\"Moving to weed\", 10)\n    move{\n        x = weed.x - (weed.radius + 50),\n        y = weed.y,\n        z = weed.z + rotary_tool_height + 20,\n        safe_z = true\n    }\n\n    on(rotary_tool_pin)\n\n    if env(\"load\") == \"stalled\" then\n        wait(1500)\n        return\n    end\n    job(\"Descending\", 40)\n    move{\n        z = weed.z + rotary_tool_height,\n        speed = 25\n    }\n\n    if env(\"load\") == \"stalled\" then\n        wait(1500)\n        return\n    end\n    job(\"Mowing\", 50)\n    move{\n        x = weed.x + (weed.radius + 50),\n        speed = 25\n    }\n\n    if env(\"load\") == \"stalled\" then\n        wait(1500)\n        return\n    end\n    job(\"Ascending\", 90)\n    move{\n        z = weed.z + rotary_tool_height + 20,\n        speed = 25\n    }\n\n    if env(\"load\") == \"stalled\" then\n        wait(1500)\n        return\n    end\n    off(rotary_tool_pin)\n    success = true\nend\n\nif not verify_tool() then\n    return\nend\n\npoints = api({\n    method = \"GET\",\n    url = \"/api/points\"\n})\n\nfor k, v in pairs(points) do\n    if v.pointer_type == \"Weed\" then\n        table.insert(weeds, {x = v.x, y = v.y, z = soil_height(v.x, v.y), radius = v.radius})\n    end\nend\n\nwatch_pin(60, watcher)\n\nfor k, v in pairs(weeds) do\n    weed = v\n    count = count + 1\n    job_time = os.time() * 1000\n    pjob(\"Mowing weed \" .. count .. \" of \" .. #weeds, count / (#weeds + 1) * 100)\n    coords = \"(\" .. weed.x .. \", \" .. weed.y .. \", \" .. weed.z .. \")\"\n    attempts = 0\n    success = false\n    while (attempts < max_attempts) and (success == false) do\n        attempt_weeding()\n    end\n    if env(\"load\") == \"stalled\" then\n        toast(\"Mowing weed at \" .. coords .. \" failed after \" .. attempts .. \" attempt(s); proceeding...\", \"warn\")\n    end\n    job(\"Complete\", 100)\nend\npjob(\"Complete\", 100)\ntoast(\"Mowing complete\", \"success\")"

:GRID: # =====================矩陈执行=====================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: Number of points
          :default_value:
            :kind: coordinate
            :args:
              :x: 19
              :y: 10
              :z: 1
      - :kind: parameter_declaration
        :args:
          :label: Spacing
          :default_value:
            :kind: coordinate
            :args:
              :x: 100
              :y: 100
              :z: 0
      - :kind: parameter_declaration
        :args:
          :label: Starting location
          :default_value:
            :kind: coordinate
            :args:
              :x: 200
              :y: 100
              :z: 0
      - :kind: parameter_declaration
        :args:
          :label: Subsequence
          :default_value:
            :kind: resource_placeholder
            :args:
              :resource_type: Sequence
  :color: gray
  :name: 矩陈执行
  :body:
  - :kind: lua
    :args:
      :lua: "subsequence = variable(\"Subsequence\")\nstart = variable(\"Starting location\")\nspacing = variable(\"Spacing\")\ngrid_points = variable(\"Number of points\")\ngrid_points_total = grid_points.x * grid_points.y * grid_points.z\njob = subsequence.name .. \" x\" .. grid_points_total\nindex = 0\ngrid_max_x = start.x + (spacing.x * grid_points.x)\ngrid_max_y = start.y + (spacing.y * grid_points.y)\nstart_time = os.time() * 1000\n\nfunction failure(reason) send_message(\"error\", reason, \"toast\") end\n\nif grid_points.x <= 0 or grid_points.y <= 0 or grid_points.z <= 0 then\n    failure(\"Number of points must be greater than 0 for all three axes\")\n    return\nelseif grid_max_x > garden_size().x or grid_max_y > garden_size().y then\n    failure(\"Grid must not exceed the **AXIS LENGTH** for the X or Y axes\")\n    return\nend\n\nmsg = \"Executing `\" .. subsequence.name .. \"` \" .. grid_points_total ..\n    \" times in a \" .. grid_points.x .. \" x \" .. grid_points.y ..\n    \" x \" .. grid_points.z .. \" grid\"\nsend_message(\"info\", msg, \"toast\")\n\n-- Move to each grid point and execute the subsequence\n\nfor grid_index_z = 0, (grid_points.z - 1) do\n    z = start.z + (spacing.z * grid_index_z)\n    for grid_index_x = 0, (grid_points.x - 1) do\n        x = start.x + (spacing.x * grid_index_x)\n        for grid_index_y = 0, (grid_points.y - 1) do\n            if (grid_index_x % 2) == 0 then\n                y = start.y + (spacing.y * grid_index_y)\n            else\n                reversed_index_y = grid_points.y - 1 - grid_index_y\n                y = start.y + (spacing.y * reversed_index_y)\n            end\n            set_job_progress(job, {\n                percent = 100 * index / grid_points_total,\n                status = \"Moving\",\n                time = start_time\n            })\n            move_absolute(x, y, z)\n            set_job_progress(job, {\n                percent = 100 * (index + 0.5) / grid_points_total,\n                status = \"Executing subsequence\",\n                time = start_time\n            })\n            cs_eval(subsequence)\n            index = index + 1\n        end\n    end\nend\n\nset_job_progress(job, {\n    percent = 100,\n    status = \"Complete\",\n    time = start_time\n})"

:DISPENSE_WATER: # ===========浇水/毫升========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
      :body:
      - :kind: parameter_declaration
        :args:
          :label: Water (mL)
          :default_value:
            :kind: numeric
            :args:
              :number: 250
  :color: blue
  :name: 浇水/毫升
  :body:
  - :kind: lua
    :args:
      :lua: "dispense(variable(\"Water (mL)\"))"

:WEED_DETECTION_GRID: # ======杂草检测========================
  :args:
    :locals:
      :kind: scope_declaration
      :args: {}
  :color: gray
  :name: 杂草检测
  :body:
  - :kind: lua
    :args:
      :lua: "local grid = photo_grid()\ntype = \"Scan\"\njob = \"Weed Detection Grid\"\nstart_time = os.time() * 1000\n\ngrid.each(function(cell)\n    set_job_progress(job, {\n        percent = 100 * (cell.count - 0.5) / grid.total,\n        status = \"Moving\",\n        time = start_time\n    })\n    move_absolute(cell.x, cell.y, cell.z)\n    set_job_progress(job, {\n        percent = 100 * (cell.count / grid.total),\n        status = \"Detecting weeds\",\n        time = start_time\n    })\n    local msg = \"Detecting weeds at location \" .. cell.count .. \" of \" ..\n                    grid.total\n    send_message(\"info\", msg)\n    detect_weeds()\nend)\n\nset_job_progress(job, {\n    percent = 100,\n    status = \"Complete\",\n    time = start_time\n})"